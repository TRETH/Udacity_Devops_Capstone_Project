pipeline {
	agent any
	stages {

		stage('Lint HTML') {
            steps {
                      sh 'tidy -q -e containers_pipeline/*.html'
                   }
                }

		stage('Build Docker Image Blue') {
			steps {
				    withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
					    sh '''
					    	docker build -t trog1/capstone:blue --build-arg IMAGE_ID="nginx:1.16.1" containers_pipeline/
					    '''
				}
			}
		}

		stage('Build Docker Image Green') {
        	steps {
        			withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
        				sh '''
        					docker build -t trog1/capstone:green --build-arg IMAGE_ID="nginx:1.17.8" containers_pipeline/
        				'''
        		}
        	}
        }

        stage('Push Image To Dockerhub') {
        	steps {
        			withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
        				sh '''
        					docker login -u $USERNAME -p $PASSWORD
        					docker push trog1/capstone:blue
        					docker push trog1/capstone:green
        					'''
        		}
        	}
        }

        stage('Set current kubectl context') {
        			steps {
        				withAWS(region:'eu-central-1', credentials:'eks_credentials') {
        					sh '''
        						kubectl config use-context arn:aws:eks:eu-central-1:672849960683:cluster/capstoneCluster
        					'''
        				}
        			}
        		}

        stage('Deploy blue containers for blue environment') {
        			steps {
        				withAWS(region:'eu-central-1', credentials:'eks_credentials') {
        					sh '''
        						sed -e 's/{{TARGET_ROLE}}/blue/g' -e 's/{{IMAGE_VERSION}}/blue/' containers_pipeline/deployment.yaml | kubectl apply -f -
        					'''
        				}
        			}
        		}

        stage('Deploy blue containers for green environment') {
                			steps {
                				withAWS(region:'eu-central-1', credentials:'eks_credentials') {
                					sh '''
                						sed -e 's/{{TARGET_ROLE}}/green/g' -e 's/{{IMAGE_VERSION}}/blue/' containers_pipeline/deployment.yaml | kubectl apply -f -
                					'''
                				}
                			}
                		}



        stage('Wait for user approval') {
             steps {
                      input "Are you ready to redirect traffic to green environment?"
              }
         }
    }
 }